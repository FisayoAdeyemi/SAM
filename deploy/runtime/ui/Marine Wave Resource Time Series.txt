Marine Wave Resource Time Series
1288
911
22
Hyperlink

1
9
Name
5
10
Hyperlink2
X
3
27
Y
3
600
Width
3
847
Height
3
21
Tool Tip
5
0
Caption
5
137
For locations not covered by the wave resource library, click here to go to the SAM website Weather Page for links to other data sources.
URL
5
33
https://sam.nrel.gov/weather-data
TabOrder
3
0
Button

1
8
Name
5
17
btnScanLibrary_ts
X
3
789
Y
3
27
Width
3
150
Height
3
24
Tool Tip
5
0
Caption
5
15
Refresh Library
TabOrder
3
4294967295
Button

1
8
Name
5
22
btn_add_remove_folders
X
3
666
Y
3
366
Width
3
252
Height
3
30
Tool Tip
5
0
Caption
5
34
Add/remove weather file folders...
TabOrder
3
2
Button

1
8
Name
5
19
btn_refresh_library
X
3
666
Y
3
396
Width
3
252
Height
3
30
Tool Tip
5
0
Caption
5
15
Refresh library
TabOrder
3
3
Button

1
8
Name
5
18
btn_view_wave_data
X
3
927
Y
3
555
Width
3
121
Height
3
43
Tool Tip
5
0
Caption
5
9
View Data
TabOrder
3
4294967295
Button

1
8
Name
5
17
btn_wave_download
X
3
618
Y
3
573
Width
3
234
Height
3
24
Tool Tip
5
0
Caption
5
30
Download and add to library...
TabOrder
3
10
Label

1
13
Name
5
15
caption_library
X
3
18
Y
3
54
Width
3
855
Height
3
36
Tool Tip
5
0
Caption
5
239
SAM's default library comes with only a few weather files to help you get started. Use the download tools below to build a library of locations you frequently model. Once you build your library, it is available for all of your work in SAM.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
13
Name
5
24
download_weather_caption
X
3
24
Y
3
492
Width
3
846
Height
3
43
Tool Tip
5
0
Caption
5
330
The High Resolution Ocean Surface Wave Hindcast is a database with 30  years of 3-hour resolution wave data that you can download and add to your wave resource library.  Download the 3-hour? time series data file based on a specified year, a specified subset of a year, or the entire multi-year dataset for a particular location. 
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
TextEntry

1
11
Name
5
12
file_name_ts
X
3
216
Y
3
309
Width
3
960
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
GroupBox

1
8
Name
5
13
group_library
X
3
12
Y
3
12
Width
3
1270
Height
3
460
Tool Tip
5
0
Caption
5
28
Wave Energy Resource Library
Bold
2
1
TextEntry

1
11
Name
5
11
in_location
X
3
27
Y
3
573
Width
3
582
Height
3
24
Tool Tip
5
0
Text
5
76
Type the latitude and longitude of the desired wave energy resource location
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
6
StringArray

1
9
Name
5
16
in_location_list
X
3
519
Y
3
573
Width
3
90
Height
3
24
Tool Tip
5
0
Label
5
0
Description
5
0
TabOrder
3
4294967295
RadioChoice

1
11
Name
5
24
in_location_options_wave
X
3
903
Y
3
495
Width
3
180
Height
3
48
Tool Tip
5
0
Selection
3
0
Items
6
2
One location
Multiple locations
ShowCaptions
2
1
Horizontal
2
0
TabOrder
3
4294967295
RadioChoice

1
11
Name
5
13
in_time_frame
X
3
30
Y
3
546
Width
3
565
Height
3
24
Tool Tip
5
0
Selection
3
0
Items
6
3
Entire year
Multiple years
Entire dataset (30yr)
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
8
CheckBox

1
9
Name
5
16
is_advanced_wave
X
3
618
Y
3
546
Width
3
210
Height
3
24
Tool Tip
5
0
Caption
5
17
Advanced download
State
2
1
TabOrder
3
4294967295
Label

1
13
Name
5
13
label_library
X
3
15
Y
3
30
Width
3
764
Height
3
21
Tool Tip
5
0
Caption
5
128
Click a name in the list to choose a file from the library. Type a few letters of the name in the search box to filter the list.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
MultilineText

1
11
Name
5
19
library_folder_list
X
3
63
Y
3
366
Width
3
588
Height
3
60
Tool Tip
5
0
Text
5
37
List of Wave Resource library folders
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Library

1
8
Name
5
11
location_ts
X
3
15
Y
3
93
Width
3
1223
Height
3
204
Tool Tip
5
0
Library
5
18
WaveResourceTSData
Fields
5
127
Name,City,State,Country,Latitude,Longitude,Nearby Buoy Number,Average Power Flux,Bathymetry,Sea Bed,Time Zone,Data Source,Notes
GroupBox

1
8
Name
5
8
object 4
X
3
12
Y
3
477
Width
3
1270
Height
3
162
Tool Tip
5
0
Caption
5
37
Download Marine Energy Resource Files
Bold
2
1
GroupBox

1
8
Name
5
10
object 418
X
3
12
Y
3
651
Width
3
1269
Height
3
96
Tool Tip
5
0
Caption
5
25
Wave Energy Resource File
Bold
2
1
Numeric

1
17
Name
5
22
wave_download_end_year
X
3
1164
Y
3
528
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
24
wave_download_start_year
X
3
1164
Y
3
495
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295

30
average_power_flux_ts
3
1
 
 
 
0
8
1
1
1
1
0
Numeric
bathymetry_ts
3
4
 
 
 
0
8
1
4
9
<invalid>
TextEntry
city_ts
3
4
 
 
 
0
8
1
4
9
<invalid>
TextEntry
country_ts
3
4
 
 
 
0
0
1
4
9
<invalid>
TextEntry
data_source_ts
3
4
 
 
 
0
0
1
4
9
<invalid>
TextEntry
energy_period
3
2
Wave Energy Period
s
 
0
8
1
2
1
1
0
DataArray
file_name_ts
3
4
Wave resource file from library
 
ME Wave Resource
0
8
1
4
0
TextEntry
in_location
3
4
 
 
 
0
0
1
4
9
<invalid>
TextEntry
in_location_list
3
2
 
 
 
0
0
1
2
1
1
0
StringArray
in_location_options_wave
3
1
 
 
 
0
0
1
1
1
1
0
Default
in_time_frame
3
0
 
 
 
0
0
1
0
Default
is_advanced_wave
3
1
 
 
 
0
0
1
1
1
1
0
Default
lat_ts
3
1
 
 
 
0
8
1
1
1
1
0
Numeric
library_folder_list
3
4
 
 
 
0
8
1
4
1
0
Default
location_ts
3
4
Wave resource location
 
ME Wave Resource
20
WaveResourceTSData|0
17
1
4
12
PacWave East
Library
lon_ts
3
1
 
 
 
0
8
1
1
1
1
0
Numeric
name_ts
3
4
 
 
 
0
8
1
4
9
<invalid>
TextEntry
nearby_buoy_number_ts
3
4
 
 
 
0
8
1
4
9
<invalid>
TextEntry
notes_ts
3
4
 
 
 
0
0
1
4
9
<invalid>
TextEntry
number_hours
3
1
 
 
 
0
8
1
1
1
1
0
Default
number_records
3
1
 
 
 
0
8
1
1
1
1
0
Default
sea_bed_ts
3
4
 
 
 
0
0
1
4
9
<invalid>
TextEntry
significant_wave_height
3
2
 Significant wave height
m 
 
0
8
1
2
1
1
0
DataArray
state_ts
3
4
 
 
 
0
8
1
4
9
<invalid>
TextEntry
time_check
3
2
Time Check
 
 
0
8
1
2
1
1
0
DataArray
tz_ts
3
1
 
 
 
0
8
1
1
1
1
0
Numeric
wave_download_end_year
3
1
Data end year 
 
 
0
0
1
1
1
1
0
Default
wave_download_start_year
3
1
Data start year
 
 
0
0
1
1
1
1
0
Default
wave_resource_file_ts
3
4
 
 
 
0
8
1
4
9
<invalid>
Default
wave_resource_filename_ts
3
4
Wave resource file name
 
ME Wave Resource 
0
9
1
4
0
Default

171
equations{'wave_resource_filename_ts'} = define() {
	return ${file_name_ts};
};

equations{'wave_resource_file_ts'} = define() {
	return ${wave_resource_filename_ts};
};


29128
/*
function enable_disable_library() {
	
	enable('wave_resource_matrix',false);
	property('wave_resource_matrix','ColorMap',enable_library);
	enable('location_ts',enable_library);
	enable('btnScanLibrary_ts',enable_library);
	enable('average_power_flux_ts',enable_library);
	enable('bathymetry_ts',enable_library);
	enable('city_ts',enable_library);
	enable('country_ts',enable_library);
	enable('data_source_ts',enable_library);
	enable('file_name_ts',enable_library);
	enable('frequency_sum',enable_library);
	enable('lat_ts',enable_library);
	enable('location_ts',enable_library);
	enable('lon_ts',enable_library);
	//enable('max_frequency',enable_library);
	//enable('max_frequency_Hs',enable_library);
	//enable('max_frequency_Te',enable_library);
	enable('name_ts',enable_library);
	enable('nearby_buoy_number_ts',enable_library);
	enable('notes_ts',enable_library);
	enable('sea_bed_ts',enable_library);
	enable('state_ts',enable_library);
	enable('tz_ts',enable_library);
	//enable('in_time_frame',enable_library);
	//enable('in_location',enable_library);
	//enable('wave_download',enable_library);
	refresh();
	
}*/

on_change{'btn_view_wave_data'} = define() {
	if ( dview_wave(value('wave_resource_filename_ts')) )
	{	msgbox('Failed to read file!\nThe data viewer was not able to open the weather file:\n' + value('wave_resource_filename_ts') ); }
};

on_change{'btn_refresh_library'} = define() {
	rescanlibrary('wave_ts');
	//update_info('on_change btn_refresh_library');
};

on_change{'btn_add_remove_folders'} = define() {
	if ( showsettings( 'wave' ) )
	{
		update_library_folders( '' );
		/*// if current library selection is no longer in library, change to first item listed in library CSV file
		L = strlen( value( 'library_folder_list' ) );
		if ( strlen( value( 'library_folder_list' ) ) < L )
		{
			if ( !solar_library(value('solar_resource_file'),false){'is_in_library'} )
			{
				first_item = solar_library(value('solar_resource')){'first_item_key'};
				first_item = replace( file_only(first_item), '.csv', '' );
				msgbox( 'Selected weather file not in solar resource library!\nThe file ' 
					     + value( file_only('solar_resource_file') )
					     + ' is not in the solar resource library. Changing library selection to ' 
					     +  first_item  + '.' );
				value( 'solar_resource' , first_item );
			}	
		}*/
	}
	else { msgbox( 'Could not open window!\nSolar Resource Data Folder Settings window not available.' ); }
};



on_change{'btnScanLibrary_ts'} = define() {
	rescanlibrary('wave_ts');
	//update_info('on_change btnScanLibrary_ts');

};

function wave_library( item, is_key )
{
	T = {};
	lib_file = userlocaldatadir() + '/WaveResourceTSData.csv';
	lib_data = csvread( lib_file, { 'table' = true } );
	files = lib_data{'File name'}; files -@ 0; files -@ 0;
	for( i=0; i<#files; i++) { files[i] = lower(slash_back_to_forward(files[i])); }
	keys = lib_data{'Name'}; keys -@ 0; keys -@ 0;
	if ( is_key ) { ii = keys ?@ item; }
	else { ii = files ?@ lower(item); }
	T{'is_in_library'} = false; 
	T{'lib_key'} = null;
	if ( ii > -1 ) 
	{
		T{'is_in_library'} = true; 
		T{'lib_key'} = keys[ii];
		T{'file_name'} = files[ii];
	}
	T{'num_files_in_library'} = #files;
	str = slash_back_to_forward( appdir() );
	arr = split( str, '/' );
	arr -@ #arr-1;
	arr[#arr] = 'location_ts';
	default_path = '';
	for( i=0; i<#arr; i++ ) {default_path += arr[i] + '/'; }
	default_files = dir_list( default_path, '*', false );
	T{'num_default_files'} = #default_files;
	return T;
}


on_load{'Marine Wave Resource Time Series'} = define() {
	
	//rescanlibrary('wave_ts');
	//enable("wave_resource_matrix",false);
	//on_change{'use_specific_ts_wf_wave'}();
	//enable_disable_library();
	on_change{'file_name_ts'};
	on_change{'in_time_frame'};
	show_year_inputs();
	on_change{'is_advanced_wave'};
	location_options();
	on_change{'in_location_options_wave'};
	update_library_folders(''); // refresh list of library folders
	//show('use_specific_wave_file', false); // determines whether user_specified_weather_file is used instead of solar_data_file_name
	//show('user_specified_wave_file', false); // requires use_specific_weather_file = 1, set by LK script
	//value('wave_data_file_name_load', value('wave_data_file_name'));
	//show('wave_data_file_name_load', false); // stores weather file name when UI form loaded
	//show('wave_data_file_name', false); 
	//show('in_time_frame', value('in_wave_options') != 0 ); //No option for TMY data on first iteraiton
	//refresh();
	//( '' );
	//update_info( 'on_load Wave Resource Data Time Series');
};

on_change{'location_ts'} = define() {
	file = ${file_name_ts};
	value("name_ts",value("location_ts"));
	refresh();
	if (!file_exists(file))
	{
		rescanlibrary( 'wave_ts' );
		refresh('location_ts');
		return;
	}
	file = replace(file, '\\', '/');
	fn = open(file,'r');

	close(fn);
	//update_info('on_change location_ts');
};


on_change{'file_name_ts'} = define() {
	
	value('wave_resource_filename_ts',value('file_name_ts'));
	//refresh('wave_resource_filename_ts');
	
};

on_change{'in_time_frame'} = define() {
	show_year_inputs();
};

function show_year_inputs() 
{
	is_multiple = (value('in_time_frame') == 1);
	show('wave_download_start_year', is_multiple);
	show('wave_download_end_year', is_multiple);
	refresh();
}

on_change{ 'is_advanced_wave' } = define() {
	if ( value('is_advanced_wave') ) {
		property( 'download_weather_caption' , 'Caption' , 'Click the Download button to choose files from a complete list of files available from the NSRDB, including TMY, TGY, TDY for different years and subhourly data.');
		property( 'download_weather_caption' , 'TextColour', 'black' );
	}
	else {
		property( 'download_weather_caption' , 'Caption' , 'The NSRDB is a database of thousands of weather files that you can download and add to your to your solar resource library: Download a default typical-year (TMY) file for most long-term cash flow analyses, or choose files to download for single-year or P50/P90 analyses. See Help for details.' );
		property( 'download_weather_caption' , 'TextColour', 'black' );
	}
	show('in_location_list', ( value('in_location_options_wave') && !value('is_advanced_wave') ) );
	show('in_location', ( !value('in_location_options_wave') && !value('is_advanced_wave') ) );
	show('in_location_options_wave', !value('is_advanced_wave') );
	show('in_time_frame', !value('is_advanced_wave')  );
	refresh('');
};

on_change{'in_location_options_wave'} = define() {
	location_options();
};

function location_options() 
{
	show('in_location_list',  value('in_location_options_wave') == 1 && !value('is_advanced_wave') );
	show('in_location',       value('in_location_options_wave') == 0 && !value('is_advanced_wave') );
	refresh('');
}


on_change{'btn_wave_download'} = define() {
	if ( value( 'is_advanced_wave' ) ) { wave_download_all(); }
	else { wave_download_get(); }
	rescanlibrary( 'wave_ts' );
	update_library_folders( '' );
	refresh('location_ts');
};

// return a set of urls for valid datasets available for a location
function wave_download( location, is_tmy )
{
	name = '';
	url = '';
	years = [];
	msg = '';
	g = {'lat'=null,'lon'=null, tz=null, 'ok'=false};
	geocode_ok = false;
	json_ok = false;
	location_ok = false;
	is_suny = false;
	if ( strpos(lower(location),'type a location name') > -1 )
	{
		msg += 'Invalid location name: \n\n' + location + '\n\n';
	}
	else
	{
		loc_test = test_decimal_degrees( location );
		msg += loc_test[1] + '\n\n';
		if (  loc_test[0] != null )
		{
			location_ok = true;
			location = loc_test[0];
			g = geocode( location );
			// sometimes correct address fails but works on second try
			if ( !g.ok ) { g = geocode( location ); }
			if ( g.ok ) { geocode_ok = true; }
		}
	}
	if ( geocode_ok )
	{
		url = webapi( 'wave_query' );
		url = replace( url, '<LAT>', g.lat );
		url = replace( url, '<LON>', g.lon );
		//url = replace( url, '<LAT>', 'xxx' );
		//url = replace( url, '<LON>', 'yyy' );
		json_str = curl( url );
		msg += 'URL for Wave Data Query: ' + url + '\n\n';
		var = json_read( json_str );
		if ( typeof( var ) == 'table' )
		{
			if ( var.errors != null)
			{
				if ( #var.errors > 0 )
				{
					msg += 'Message from Wave Data Query: ' + var.errors[0] + '.\nStatus = ' + var.status;
				}
				else { json_ok = true; }	
			}
			elseif ( var.error != null )
			{
				if ( #@var.error > 0 )
				{
					msg += 'Wave Data Query Error: ' + var.error.message + '.\nCode = ' + var.error.code;
					if ( strpos( lower(var.code), 'api' ) > -1 ) { msg += 'See private.h to set API keys.'; }
				}	
			}
			elseif ( var.outputs == null )
			{
				msg += 'Wave Data Query returns no data for \"' + location + '\" (outputs = null).\nSee https://sam.nrel.gov/weather for links to other data sources.\n';
			}
			elseif ( var.outputs == [] )
			{
				msg += 'Wave Data Query returns no data for \"' + location + '\" (outputs = []).\nSee https://sam.nrel.gov/weather for links to other data sources.\n';
			}
			else
			{
				json_ok = true;
			}	
		}
		else
		{
			msg += 'Wave Data Query did not return valid JSON string:\n';
			msg += json_str;
		}
		if ( json_ok )
		{
			available_datasets = var.outputs;
			// list of datasets that don't require advanced download
			// not all datasets work with SAM, for example spectral-india-tmy
			valid_datasets = 'psm3,psm3-tmy,msg-iodc,suny-india,suny-india-tmy'; 
			for ( i=0; i<#available_datasets; i++ )
			{
				available_names[i] = available_datasets[i].name;
				if ( strpos(available_datasets[i].name, 'suny') > -1 ) { is_suny = true;}
			}
			i_dataset = -1;
			for ( i=0; i<#available_datasets; i++ )
			{
				if ( strpos(valid_datasets,available_datasets[i].name) > - 1 )
				{
					if ( is_tmy && (available_datasets[i].name == 'psm3-tmy' || available_datasets[i].name == 'suny-india-tmy') )
					{
						i_dataset = i;
					}
					elseif ( !is_tmy && ( available_datasets[i].name == 'suny-india' || available_datasets[i].name == 'psm3' ) )
					{
						i_dataset = i;
					}
					elseif ( !is_tmy && !is_suny && available_datasets[i].name == 'msg-iodc' )
					{
						i_dataset = i;
					}
				}
			}	
			if ( i_dataset == -1 )
			{
				str_tmy = '';
				if ( is_tmy ) { str_tmy = 'TMY'; }
				msg += 'No ' + str_tmy + 'file available for \"' + location + '\". (Avalable datasets: ' + available_names + ')\n';
				msg += 'Try the Advanced Download option or see https://sam.nrel.gov/weather for other sources of data.\n';
				dataset_ok = false;
			}
			else
			{
				name = var.outputs[i_dataset].name;
				url = var.outputs[i_dataset].apiUrl+'.csv';
				years = var.outputs[i_dataset].availableYears;
				dataset_ok = true;
			}
		}
		//else { msg += 'JSON tests failed. There may be a problem with the service.'; }
	}
	else
	{
		geocode_ok = false;
		msg += 'Geocoding failed: Could not connect to service or failed to recognize \"' + location + '\" \n';
	}
	ok_test = ( ( geocode_ok == true ) && ( json_ok == true ) && ( dataset_ok == true ) && ( location_ok == true ) );
	return { 'name' = name , 'msg' = msg , 'is_suny' = is_suny, 'url' = url, 'years' = years , 'ok' = ok_test , 'lat' = g.lat, 'lon' = g.lon };
}

// display window for advanced download
function wave_download_all() 
{
	hash = wavetoolkit();
	// meta data
	if ( hash != '' )
	{ 
		fn = hash{'file'};
		dn = hash{'folder'};
		af = hash{'addfolder'};
		if ( fn != '' )
		{
			error = wf_check( fn );
		}	
		if (af == "no")
		{
			if ((fn != '') && (dn != ''))
			{
				//value( 'use_specific_ts_wf_wave', 1 );
				fn = replace(fn, '\\', '/');
				//value( 'user_specified_wave_resource_ts', fn );
			}
		}
		else
		{
			rescanlibrary( 'wave_ts' );  //** is this necessary??
			if (fn != '')
			{
				
				value( 'location_ts', file_to_key( fn ) );
			}
		}
	}
}

function wave_download_get()
{
	enum { SINGLE_YEAR, MULTIPLE_YEARS, ALL_YEARS };
	enum { ONE_LOCATION, MULTIPLE_LOCATIONS };
	//enum { HOURLY, HALF_HOURLY };
	msg = '';
	download_ok = true;
	location_ok = true;
	folder = slash_back_to_forward( wfdownloaddir() );
	log_file = folder + '/sam_wave_download_log.txt';
	if ( file_exists( log_file ) ) { flog = open( log_file , 'a' ); }
	else { flog = open( log_file, 'w' ); }
	write_line( flog, 'NSRDB Download ' + date_time());
	write_line( flog, '==========================================================\n');	
	if ( value( 'in_location_options_wave' ) == ONE_LOCATION )
	{	
		location = [ value('in_location') ];
	}
	else
	{
		location_list = value('in_location_list'); // string with '|' delimiter
		location_list = replace( location_list, '\"', '' ); // files from spreadsheets may use quotes for strings
		location = split(location_list, '|');
	}
	download_option = value('in_nsrdb_options');
	if ( value( 'in_time_step' ) == HOURLY || download_option == TMY ) // tmy is always hourly
	{	
		time_step = '60'; 
	}
	else
	{
		time_step = '30'; 
	}
	write_line( flog, 'Requested location(s): ' + location + '\n');
	pb_locations = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #location } );
	for ( n=0; n<#location; n++ )
	{
		write_line( flog, 'Location ' + to_string(n+1) + ' of ' + #location + ': \"' + location[n]  + '\"');
		write_line( flog, '----------------------------------------------------------\n');	
		progressbar( pb_locations, { 'message' = 'Getting download information for \"' + location[n] + '\".' , 'value' = 1+n } );
		dataset[n] = wave_download( location[n], download_option == TMY );
		progressbar( pb_locations, { 'message' = 'Processing download information for \"' + location[n] + '\".' , 'value' = 1+n } );
		if ( !dataset[n].ok )
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
			msg += dataset[n].msg + '\n';
			continue;
		}	
		
		if ( download_option == SINGLE_YEAR ) 
		{
			
			y = choose_from_list( dataset[n].years, 'Choose a year', 'Available Years for \"' + location[n] +'\"', 0 ); 
			if (y == '')
			{
				download_ok = false;
				write_line( flog, 'Year not valid: Selection cancelled by user.\n' );
				continue;
			}
			else	
			{	
				type = [to_int( y )]; 
			}
		}
		else if (download_option == MULTIPLE_YEARS) {
			show('wave_download_start_year', download_option == MULTIPLE_YEARS);
			show('wave_download_end_year', download_option == MULTIPLE_YEARS);
			start_year = wave_download_start_year;
			end_year = wave_download_end_year;
			for (i = 0; i <= (wave_download_end_year - wave_download_start_year);i++) {
				type[i] = wave_download_start_year + i;
			}
			y = choose_from_list( dataset[n].years, 'Choose years', 'Available Years for \"' + location[n] + '\"', 0);
		}
		else // all years
		{	
			type = dataset[n].years; 
		}
		write_line( flog, 'Requested year(s): ' + type );
		if ( dataset[n].ok )
		{ 
			base_url = dataset[n].url;
			base_url += '?api_key=<SAMAPIKEY>';
			base_url += '&full_name=sam_user';
			base_url += '&email=<USEREMAIL>';
			//base_url += '&email=sam.support@nrel.gov';
			base_url += '&affiliation=unknown'; 
			base_url += '&mailing_list=false';
			base_url += '&reason=SAM';
			base_url += '&interval=' + time_step;
			base_url += '&utc=false';
			base_url += '&leap_day=false';

			// create folder for multiple years to facilitate
			// p50 p90 and add to library folders list
			// do not put tmy file in multiple year folder
			// use default folder if mdkir() fails
			default_download_path = slash_back_to_forward( folder );
			tmy_path = slash_back_to_forward( default_download_path );
			path = slash_back_to_forward( default_download_path );
			if ( #type > 1 )
			{
				path = path + '/' + clean_name( location[n] ) ;
				if ( !dir_exists( path ) )
				{
					if ( !mkdir( path, false ) )
					{	path = default_download_path; }
				}
				if ( path != default_download_path /*&& i == 0*/)
				{	update_library_folders( path ); }
			}
			
			pb_years = progressbar( { 'title' = 'Download Progress for ' + location[n] , 'message' = 'Downloading, please wait...', 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #type } );
				
			// for each year
			base = base_url;
			for( i=0; i<#type; i++ )
			{
				base_url = base;
				progressbar( pb_years, { 'message' = 'Preparing file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
				file_skipped = false;
				no_current_data = false;
				// only get attributes SAM needs for simulations
				// otherwise default is to get all attributes
				// https://developer.nrel.gov/docs/solar/nsrdb/
				if ( dataset[n].name == 'psm3')
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed,surface_albedo';
				}
				elseif ( dataset[n].name == 'psm3-tmy')
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,wind_direction,wind_speed,surface_albedo';
				}
				elseif ( dataset[n].name == 'suny-india' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,surface_temperature,surface_pressure,relative_humidity,wdir,wspd,snow_depth';
				}
				elseif ( dataset[n].name == 'suny-india-tmy' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,wind_direction,wind_speed';
				}
				elseif ( dataset[n].name == 'msg-iodc' )
				{
					base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed,surface_albedo';
				}
				write_line( flog, '\nFile ' + to_string(i+1) + ' of ' + #type + ': ' + type[i]);
				write_line( flog, '----------------------------------------------------------\n');	
				url = base_url + '&names=' + to_string(type[i]);
				url += '&wkt=POINT(' + dataset[n].lon + '%20' + dataset[n].lat + ')';
				write_line( flog, url + '\n');
				fname = path + '/' + clean_name( location[n] ) + '_' + dataset[n].lat + '_' + dataset[n].lon + '_' + dataset[n].name + '_' + time_step + '_' + type[i] + '.csv';
				if ( type[i] == 'tmy' ) 
				{
					fname = replace( fname, path, tmy_path ); 
					fname_tmy = fname;
				}
				if ( wave_library( fname, false ){'is_in_library'} )
				{
					file_skipped = true;
					str = 'File skipped, already exists: ' + fname + '\n';
					write_line( flog, str );
					msg += str + '\n';
					if ( #location == 1 )
					{
						value( 'location_ts', file_to_key( fname ) );
					}	
				}
				else // elseif ( !no_current_data )	
				{
					wf_error = '';
					start = start_timer();
					progressbar( pb_years, { 'message' = 'Downloading file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
					curl_ok = curl( url , { 'file'= fname } ); // curl() should replace <SAMAPI> from private.h and <USEREMAIL > from registry
					time = elapsed_time() / 1000;
					write_line( flog, 'Download time: ' + time + ' seconds.\n' );
					progressbar( pb_years, { 'message' = 'Checking file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
					if ( !curl_ok )
					{
						download_ok = false;
						write_line( flog, 'Failed to download file from NSRDB: cURL failed.');
						msg += ('Failed to download weather file ' + fname + '\n');
					}
					else
					{
						wf_error = wf_check( fname );
						if ( wf_error != "0" ) // usually indicates NSRDB returned a file containing error message instead of weather data
						{
							download_ok = false;
							write_line( flog, 'Weather file test failed, ' + wf_error + ': ' + fname + '.\n');
							file_text = read_text_file( fname );
							if ( #file_text < 1000 ) // probably JSON returned by NSRDB
							{ 
								var_err = json_read( file_text );
								msg += 'Error message from NSRDB: \n' + var_err.errors[0] +'\n\n';
								write_line( flog, 'Text from file:\n' +  file_text );
							}
							msg += 'Weather file test failed for ' + file_only( fname ) + '.\n';
							fname_new = replace( fname, '.csv' , '_bad.txt' ); // rename file so next download attempt won't detect existing file
							ok = rename_file( fname , fname_new );
							if ( ok )
							{ 
								write_line( flog, '* File renamed to: ' + fname_new + '.\n' );
							}
							else
							{
								write_line( flog, '* Failed to rename ' + fname + '.\n' );	
							}	
						}
						// set library to last file that was downloaded and passed weather file test
						elseif ( i == #type - 1 ) 
						{
							rescanlibrary('wave_ts');
							fn = fname;
							value( 'location_ts', file_to_key( fn ) );
							write_line( flog, 'Weather file test passed: ' + fname + '.\n');
						}	
					}
				}
			}	
			progressbar( pb_years );
		}	
		else
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
		}
	}
	progressbar( pb_locations );
	close ( flog );
	if ( download_ok && #type > 1 ) // multiple years
	{
		str = 'Download complete!\n';
		str += 'Multiple single-year files downloaded to:\n  ' + path + '\n\n';
		str += 'Do you want to show instructions for running a P50/P90 analysis now?';
		if ( yesno( str ) )
		{
			folder = path;
			p50p90_text = 'Instructions for running P50/P90 simulations:\n\n'
			+ '1. Click P50 / P90 at the bottom left of the main SAM window.\n\n'
			+ '2. Click the ellipses (...) to the right of the Select Weather File Folder box.\n\n'
			+ '3. Navigate to ' + folder + '.\n\n'
			+ '4. Click "Run P50/P90 simulations".\n'
			+ '\nIf you want to set a custom P value in addition to P10, P50 and P90, you can type a value for "Custom Px" before running the simulations.'
			+ '\n\nTo remove this note window, delete all of its contents and close the window.';
			pagenote( p50p90_text );
		}
	}
	elseif ( download_ok && !file_skipped && !no_current_data )
	{
		str = 'Download complete!\n';
		str += 'Weather file(s) downloaded to:\n' + path + '.\n';
		str += '\nOpen log file?';
		show_log = yesno( str );
		if ( show_log ) { browse( log_file ); }
	}
	elseif ( download_ok && file_skipped )
	{
		str = 'File already in library.\n Download skipped.\n\n' + fname;
		msgbox( str );
	}
	else 
	{
		show_log = yesno( 'Download Messages\n' + msg + '\nOpen log file?');
		if ( show_log ) { browse( log_file ); }
	}
}

function update_library_folders( new_path )
{
	//msgbox('Hello from update_library_folders()');
	x = get_settings('wave_data_paths');
	// add new path if provided and it doesn't already exist in the library
	if ( new_path != '' && dir_exists( new_path ) && ( strpos( x, new_path ) < 0 ) )
	{
		if ( x != '' ) { x += ';'; }
		x += slash_back_to_forward( new_path );
	}
	// list of library folders files to display on separate lines
	paths = split( x, ';' );
	// put solar download folder at top of list
	clean_list = '';
	// remove folders in list that no longer exist
	for (i = 0; i<#paths; i++ )
	{
		if ( dir_exists( paths[i] ) )
		{
			clean_list += paths[i];
			if ( i < #paths-1 ) { clean_list += ';'; }
		}	
	}		
	// update solar_data_paths used by library.cpp and nsrdb.cpp to cleaned list		
	set_settings('wave_data_paths', clean_list );
	// update list to display
	value( 'library_folder_list', get_settings('wave_download_path') + '\n' 
	       + replace( clean_list , ';' , '\n' ) );
	rescanlibrary( 'wave_ts' );        
}

function update_info( ctxt )
{
	wf = value('wave_resource_filename_ts'); 
	L = strlen( value( 'library_folder_list' ) );
	/*msgbox('Hello from update_info() in ' + ctxt + '!\nsolar_resource_file = ' + value('solar_resource_file')
	       + '\nsolar_data_file_name = ' + value('solar_data_file_name')
	       + '\n\nsolar_data_file_name_load = ' + value('solar_data_file_name_load')  
	       + '\n\nuser_specified_weather_file = ' + value('user_specified_weather_file')
	       + '\n\nfile_name = ' + value('file_name') 
	       + '\n\nsolar_resource = ' + value('solar_resource') 
	       + '\n\nwf is in library = ' + wave_library(value('solar_resource_file'),false){'is_in_library'}
	       + '\n\ncurrent selection is in library = ' + wave_library(value('solar_resource'),true){'is_in_library'} );*/
	
	//if selected library file is no longer in library reload library, and exit
	wf_ok = false;
	if (!file_exists(wf) )
	{
		msg_caption = 'Weather file does not exist. Please choose or download a different file above.';
		msg_color = 'red';
		show_button = false;
		rescanlibrary('wave_ts'); // remove deleted file from library
	}
	// display message depending on whether file is in library or is a user-specified file
	elseif ( wf != value('file_name_ts') )
	{
		msg_caption = 'The weather file is different from the file selected in the library because it was modified by an LK script. Click Add File to Library if you want the file to appear in the library list above.';
		msg_color = 'red';
		show_button = true;
	}
	elseif ( strlen( value( 'library_folder_list' ) ) < L ) // ** this check should never be true, right???
	{
		msg_caption = 'Weather file folder not in list? Please choose or download a different file above, or click Add file to library.';
		msg_color = 'red';
		show_button = true;
	}
	elseif ( !wave_library(slash_back_to_forward(value('location_ts')),true){'is_in_library'} )
	{
		msg_caption = 'Weather file is not in library. Please choose or download a different file above, or click Add file to library.';
		msg_color = 'red';
		show_button = true;
	}
	else
	{
		msg_caption = 'The following information describes the data in the highlighted weather file from the Solar Resource library above. This is the file SAM will use when you click Simulate.';
		msg_color = 'black';
		show_button = false;
		wf_ok = true;
	}

	// show / hide PV only summary data

	// display message for new users if library contains only default files
	property( 'caption_library', 'Caption', 'The default library comes with only a few weather files to help you get started. Use the download tools below to build a library of locations you frequently model. Once you build your library, it is available for all of your work in SAM.' );
	property( 'caption_library', 'TextColour', 'black' );
	lib = wave_library( 'dummy', false );
	if ( lib{'num_files_in_library'} == lib{'num_default_files'} )
	{
		property( 'caption_library', 'Caption', 'You have not added any weather files to your library. To add files, use the download tools below to get weather files from the NSRDB, or click Add Remove Weather File folders to add files from your computer. The default library comes with only a few weather files to help you get started.' );
		property( 'caption_library', 'TextColour', 'red' );
	}

	// calculate and display annual summary data
	if ( wf_ok )
	{
		obj = ssc_create();
		ssc_var( obj, "wave_resource_model_choice", 1);
		ssc_var( obj, "wave_resource_filename_ts", value('wave_resource_filename_ts'));
		result = ssc_exec( obj, 'wave_file_reader' );
		if ( 0 == result )
		{
			value( 'name_ts', ssc_var(obj, 'name') );
			value( 'city_ts', ssc_var(obj, 'city') );
			value( 'state_ts', ssc_var(obj, 'state') );
			value( 'country_ts', ssc_var(obj, 'country') );
			value( 'lat_ts', ssc_var(obj, 'lat') );
			value( 'lon_ts', ssc_var(obj, 'lon') );
			value( 'nearby_buoy_number_ts', ssc_var(obj, 'nearby_buoy_number') );
			value( 'significant_wave_height', ssc_var(obj, 'significant_wave_height') );
			value( 'energy_period', ssc_var(obj, 'energy_period') );
			// used for timestep calculation in editscene3d
			value( 'number_records', ssc_var(obj, 'number_records') );
			value( 'number_hours', ssc_var(obj, 'number_hours') );
		}
		else
		{
			msgbox('Weather file reader failed!\n' 
			+ result
			+ '\n\nTo avoid this message, remove  the following file from your weather file folders: \n' + wf);
			value( 'significant_wave_height', nan() );
			value( 'energy_period', nan() );
			value( 'number_records', 0);
			value( 'number_hours', 0);
		}
		ssc_free( obj );
	}
	
	if ( librarygetcurrentselection('location_ts') == '' )
	{
		librarynotifytext('location_ts','Please choose a file. Nothing selected.');
	}
	elseif ( !wave_library(slash_back_to_forward(value('location_ts')),true){'is_in_library'} ) 
	{
		librarynotifytext('location_ts', 'Please choose a file. Current selection not in library.');
	}
	elseif (librarygetnumbermatches('location_ts') < 1)
	{
		value('in_location', librarygetfiltertext('location_ts'));
		librarynotifytext('location_ts', 'No match found. Try downloading a weather file below.');
	}
	elseif ( librarygetcurrentselection('location_ts') != file_to_key( value('wave_resource_filename_ts')) )
	{
		librarynotifytext('location_ts','Current selection is different from weather file.');
	}
	else
	{
		librarynotifytext('location_ts', ''); //'Everything is fine.'
		value('in_location', 'Type a location name, street address, or lat,lon in decimal degrees');
	}
	
	//msgbox('libraryget functions'+
	//'\nfiltertext = ' + librarygetfiltertext('solar_resource') 
	//+ '\nnumber matches = ' + librarygetnumbermatches('solar_resource') 
	//+ '\ncurrentselection = ' + librarygetcurrentselection('solar_resource'));
	
	//display_tech_message();
}

function slash_back_to_forward( str )
{
	return replace( str, '\\', '/' );
}

function file_to_key( file ) 
{
		key = file_only( file );
		key = replace( key, '.' + ext_only( file ), '' );
		return key;
}

